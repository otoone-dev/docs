#include <M5Unified.h>
#include <cfloat>
#include <driver/adc.h>

const double sinTable[256] = {
0.000000,0.024541,0.049068,0.073565,0.098017,0.122411,0.146730,0.170962,0.195090,0.219101,0.242980,0.266713,0.290285,0.313682,0.336890,0.359895,
0.382683,0.405241,0.427555,0.449611,0.471397,0.492898,0.514103,0.534998,0.555570,0.575808,0.595699,0.615232,0.634393,0.653173,0.671559,0.689541,
0.707107,0.724247,0.740951,0.757209,0.773010,0.788346,0.803208,0.817585,0.831470,0.844854,0.857729,0.870087,0.881921,0.893224,0.903989,0.914210,
0.923880,0.932993,0.941544,0.949528,0.956940,0.963776,0.970031,0.975702,0.980785,0.985278,0.989177,0.992480,0.995185,0.997290,0.998795,0.999699,
1.000000,0.999699,0.998795,0.997290,0.995185,0.992480,0.989177,0.985278,0.980785,0.975702,0.970031,0.963776,0.956940,0.949528,0.941544,0.932993,
0.923880,0.914210,0.903989,0.893224,0.881921,0.870087,0.857729,0.844854,0.831470,0.817585,0.803208,0.788346,0.773010,0.757209,0.740951,0.724247,
0.707107,0.689541,0.671559,0.653173,0.634393,0.615232,0.595699,0.575808,0.555570,0.534997,0.514103,0.492898,0.471397,0.449611,0.427555,0.405241,
0.382683,0.359895,0.336890,0.313682,0.290285,0.266713,0.242980,0.219101,0.195090,0.170962,0.146730,0.122411,0.098017,0.073564,0.049067,0.024541,
-0.000000,-0.024541,-0.049068,-0.073565,-0.098017,-0.122411,-0.146730,-0.170962,-0.195090,-0.219101,-0.242980,-0.266713,-0.290285,-0.313682,-0.336890,-0.359895,
-0.382683,-0.405241,-0.427555,-0.449612,-0.471397,-0.492898,-0.514103,-0.534998,-0.555570,-0.575808,-0.595699,-0.615232,-0.634393,-0.653173,-0.671559,-0.689541,
-0.707107,-0.724247,-0.740951,-0.757209,-0.773010,-0.788346,-0.803208,-0.817585,-0.831470,-0.844854,-0.857729,-0.870087,-0.881921,-0.893224,-0.903989,-0.914210,
-0.923880,-0.932993,-0.941544,-0.949528,-0.956940,-0.963776,-0.970031,-0.975702,-0.980785,-0.985278,-0.989177,-0.992480,-0.995185,-0.997290,-0.998795,-0.999699,
-1.000000,-0.999699,-0.998795,-0.997290,-0.995185,-0.992480,-0.989177,-0.985278,-0.980785,-0.975702,-0.970031,-0.963776,-0.956940,-0.949528,-0.941544,-0.932993,
-0.923879,-0.914210,-0.903989,-0.893224,-0.881921,-0.870087,-0.857729,-0.844853,-0.831469,-0.817585,-0.803208,-0.788346,-0.773010,-0.757209,-0.740951,-0.724247,
-0.707107,-0.689541,-0.671559,-0.653173,-0.634393,-0.615231,-0.595699,-0.575808,-0.555570,-0.534998,-0.514103,-0.492898,-0.471397,-0.449611,-0.427555,-0.405241,
-0.382683,-0.359895,-0.336890,-0.313682,-0.290284,-0.266712,-0.242980,-0.219101,-0.195090,-0.170962,-0.146730,-0.122410,-0.098017,-0.073565,-0.049068,-0.024541,
};

const double waveTable[256] = {
6946,10510,12198,12140,10825,10965,11098,14342,14797,14877,14648,14423,14208,12181,12013,11957,
11102,10995,10673,7982,7800,7510,5895,5821,5602,4849,4843,4770,4020,4019,3906,3701,
3531,3538,3557,3851,4021,4245,4609,4575,4534,4128,4062,3995,4447,4515,4568,4141,
4035,3959,3685,3331,3096,2318,1998,1808,1789,1554,1444,1457,1807,1932,1941,2447,
2545,2533,2442,2449,2475,2729,2777,2886,2946,2840,2837,3266,3334,3098,2738,2770,
2850,6164,6294,9923,26504,26621,26391,25936,25500,26208,27365,28154,28241,28372,27449,26401,
25119,23521,23024,22511,20529,19399,18370,16357,15275,14405,13096,12642,12339,11790,11302,11011,
10014,9420,9108,9073,8138,8020,8035,7839,7853,7817,6904,6724,6663,6092,6046,6040,
5700,5669,5620,4952,4863,4505,2707,2661,2527,587,503,262,-660,-691,-824,-1060,
-803,-835,-900,-1137,-1162,-1198,-1129,-1299,-1504,-2389,-2271,-2154,-1625,-1765,-1893,-2418,
-2929,-3340,-3695,-3548,-3451,-3712,-4111,-4350,-5251,-5585,-5758,-5758,-6363,-6525,-6554,-7282,
-7479,-7562,-8645,-8669,-8695,-9682,-9892,-10023,-11271,-11386,-11528,-12671,-12733,-12823,-13384,-13416,
-13547,-14298,-14319,-14302,-14604,-14605,-14683,-14847,-14635,-14623,-14591,-14454,-14600,-14820,-15253,-15143,
-15003,-15043,-15084,-15122,-15045,-15127,-15211,-15381,-15367,-15356,-14990,-15049,-15088,-15399,-15349,-15325,
-15546,-15456,-15408,-15406,-15402,-15503,-15485,-15206,-15153,-15192,-15497,-15499,-15454,-15046,-15007,-15014,
-15166,-15179,-15097,-14493,-14470,-14490,-14021,-13940,-13973,-14109,-14121,-14074,-14106,-14121,-11424,-5764
};

volatile float lowPassP = 0.1f;
volatile float lowPassR = 5.0f;
volatile float lowPassQ = 0.5f;
volatile float lowPassIDQ = 1.0f / (2.0f * lowPassQ);
volatile float lowPassValue = 0.0f;
volatile double lp_a0 = 1.0f;
volatile double lp_a1 = 0.0f;
volatile double lp_a2 = 0.0f;
volatile double lp_b0 = 0.0f;
volatile double lp_b1 = 0.0f;
volatile double lp_b2 = 0.0f;

volatile float phase = 0.0f;
static float currentWavelength = 0.0f;
volatile float currentWavelengthTickCount = 0.0f;
volatile float requestedVolume = 0.0f;
#define DELAY_BUFFER_SIZE (8000)
volatile float delayBuffer[DELAY_BUFFER_SIZE];
volatile int delayPos = 0;
static M5Canvas canvas(&M5.Lcd);

void setup() {
  // put your setup code here, to run once:
  auto cfg = M5.config();
  M5.begin(cfg);
  canvas.setColorDepth(8);
  canvas.createSprite(M5.Lcd.width(), M5.Lcd.height());

  lowPassP = 0.5f;// menu.lowPassP / 10.0f;
  lowPassR = 5.0f;//menu.lowPassR;
  lowPassQ = 0.8f;//menu.lowPassQ / 10.0f;
  lowPassIDQ = 1.0f / (2.0f * lowPassQ);
}

//---------------------------------
double InteropL(volatile const double* table, int tableCount, double p) {
  double v = (tableCount - DBL_MIN) *p;
  int t = (int)v;
  v -= t;
  double w0 = table[t];
  t = (t + 1) % tableCount;
  double w1 = table[t];
  return (w0 * (1.0 - v)) + (w1 * v);
}

//-------------------------------------
#define SAMPLING_RATE (25000.0f)
double LowPass(double value, double freq, double idq) {
	// フィルタ計算用のバッファ変数。
	static double in1  = 0.0;
	static double in2  = 0.0;
	static double out1 = 0.0;
	static double out2 = 0.0;

  //double lp = b0/a0 * value + b1/a0 * in1  + b2/a0 * in2 - a1/a0 * out1 - a2/a0 * out2;
  float lp = (lp_b0 * value + lp_b1 * in1  + lp_b2 * in2 - lp_a1 * out1 - lp_a2 * out2) / lp_a0;

  in2  = in1;
  in1  = value;
  out2 = out1;
  out1 = lp;
  return lp;
}

//-------------------------------------
uint16_t CreateWave() {
    // 波形を生成する
    phase += currentWavelengthTickCount;
    if (phase >= 1.0) phase -= 1.0;

    double g = InteropL(waveTable, 256, phase) / 32767.0;

    if (lowPassQ > 0.0) {
      g = LowPass(g, lowPassValue, lowPassIDQ);
    }

    double e = (32767.0 * g * requestedVolume) + delayBuffer[delayPos];;

    delayBuffer[delayPos] = e * 0.95;
    delayPos = (delayPos + 1) % DELAY_BUFFER_SIZE;

    if (e < -32700.0) e = -32700.0;
    else if (e > 32700.0) e = 32700.0;

    return (uint16_t)(e + 32767.0);
}

//--------------------------
float CalcFrequency(float note) {
  return 440.0f * pow(2.0f, (note - (69.0f - 12.0f)) / 12.0f);
}

//-------------------------------------
void loop() {
  // put your main code here, to run repeatedly:
  float wavelength = CalcFrequency(60.0f);
  currentWavelengthTickCount = (wavelength / SAMPLING_RATE);
      float omega = lowPassValue / SAMPLING_RATE;
      float alpha = InteropL(sinTable, 1024, omega) * lowPassIDQ;
      float cosv = InteropL(sinTable, 1024, omega + 0.25f);
      float one_minus_cosv = 1.0f - cosv;
      lp_a0 =  1.0f + alpha;
      lp_a1 = -2.0f * cosv;
      lp_a2 =  1.0f - alpha;
      lp_b0 = one_minus_cosv * 0.5f;
      lp_b1 = one_minus_cosv;
      lp_b2 = lp_b0;

  unsigned long t0 = micros();
  for (int i = 0; i < 100; i++) {
    //CreateWave();
    int ana = adc1_get_raw(ADC1_CHANNEL_0);
  }
  float td = static_cast<int>(micros() - t0) / 100.0f;

  canvas.fillScreen(BLACK);
  char s[32];
  sprintf(s, "%1.2f us", td);
  //sprintf(s, "%d", ana);
  canvas.drawString(s, 10, 10, 2);

  canvas.pushSprite(0, 0);

  delay(16);
}
